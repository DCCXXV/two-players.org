// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (id, game_type, is_private)
VALUES ($1, $2, $3)
RETURNING id, name, game_type, is_private, created_at
`

type CreateRoomParams struct {
	ID        pgtype.UUID
	GameType  string
	IsPrivate bool
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, arg.ID, arg.GameType, arg.IsPrivate)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameType,
		&i.IsPrivate,
		&i.CreatedAt,
	)
	return i, err
}

const listRooms = `-- name: ListRooms :many
SELECT id, game_type, is_private, created_at
FROM rooms
ORDER BY created_at DESC
`

type ListRoomsRow struct {
	ID        pgtype.UUID
	GameType  string
	IsPrivate bool
	CreatedAt pgtype.Timestamp
}

func (q *Queries) ListRooms(ctx context.Context) ([]ListRoomsRow, error) {
	rows, err := q.db.Query(ctx, listRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRoomsRow
	for rows.Next() {
		var i ListRoomsRow
		if err := rows.Scan(
			&i.ID,
			&i.GameType,
			&i.IsPrivate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
