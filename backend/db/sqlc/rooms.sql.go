// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
    name,
    game_type,
    game_options,
    is_private
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, name, game_type, game_options, is_private, created_at
`

type CreateRoomParams struct {
	Name        string `json:"name"`
	GameType    string `json:"game_type"`
	GameOptions []byte `json:"game_options"`
	IsPrivate   bool   `json:"is_private"`
}

// Create a new game room and return the created room record.
func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom,
		arg.Name,
		arg.GameType,
		arg.GameOptions,
		arg.IsPrivate,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameType,
		&i.GameOptions,
		&i.IsPrivate,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms
WHERE id = $1
`

// Delete a room by its ID.
// Note: ON DELETE CASCADE on players table will handle removing associated players.
func (q *Queries) DeleteRoom(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteRoom, id)
	return err
}

const getRoomByID = `-- name: GetRoomByID :one
SELECT id, name, game_type, game_options, is_private, created_at FROM rooms
WHERE id = $1
LIMIT 1
`

// Retrieve a specific room by its unique ID.
func (q *Queries) GetRoomByID(ctx context.Context, id pgtype.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoomByID, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.GameType,
		&i.GameOptions,
		&i.IsPrivate,
		&i.CreatedAt,
	)
	return i, err
}

const listPublicRooms = `-- name: ListPublicRooms :many
SELECT id, name, game_type, game_options, is_private, created_at FROM rooms
WHERE is_private = FALSE
ORDER BY created_at DESC
`

// Retrieve all rooms that are not private, ordered by creation time descending.
// Useful for a public lobby list.
func (q *Queries) ListPublicRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, listPublicRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GameType,
			&i.GameOptions,
			&i.IsPrivate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRoomsByGameType = `-- name: ListRoomsByGameType :many
SELECT id, name, game_type, game_options, is_private, created_at FROM rooms
WHERE game_type = $1 AND is_private = FALSE
ORDER BY created_at DESC
`

// Retrieve all public rooms for a specific game type.
func (q *Queries) ListRoomsByGameType(ctx context.Context, gameType string) ([]Room, error) {
	rows, err := q.db.Query(ctx, listRoomsByGameType, gameType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.GameType,
			&i.GameOptions,
			&i.IsPrivate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
