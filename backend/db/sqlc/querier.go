// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Registers a new active connection with a unique display name.
	// Fails if the display_name is already taken (due to PRIMARY KEY constraint).
	CreateActiveConnection(ctx context.Context, displayName string) (ActiveConnection, error)
	// Links an active connection (identified by player_display_name) to a specific room (room_id)
	// with a designated player_order (0 or 1).
	// Assumes the player_display_name already exists in the active_connections table.
	CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error)
	// Create a new game room and return the created room record.
	CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error)
	// Removes an active connection record (e.g., on disconnect).
	// ON DELETE CASCADE on players table will remove associated player records.
	DeleteActiveConnection(ctx context.Context, displayName string) error
	// Delete a room by its ID.
	// Note: ON DELETE CASCADE on players table will handle removing associated players.
	DeleteRoom(ctx context.Context, id pgtype.UUID) error
	// Finds connections that haven't been seen recently (for cleanup).
	FindStaleConnections(ctx context.Context, lastSeen pgtype.Timestamptz) ([]string, error)
	// Retrieves an active connection by display name.
	GetActiveConnection(ctx context.Context, displayName string) (ActiveConnection, error)
	// Retrieves all players associated with a specific room, ordered by their turn.
	GetPlayersByRoomID(ctx context.Context, roomID pgtype.UUID) ([]Player, error)
	// Retrieve a specific room by its unique ID.
	GetRoomByID(ctx context.Context, id pgtype.UUID) (Room, error)
	// Lists users currently in the lobby state.
	ListActiveLobbyUsers(ctx context.Context) ([]string, error)
	// Retrieve all rooms that are not private, ordered by creation time descending.
	// Useful for a public lobby list.
	ListPublicRooms(ctx context.Context) ([]Room, error)
	// Retrieve all rooms that are not private with player info, ordered by creation time descending.
	ListPublicRoomsWithPlayers(ctx context.Context, arg ListPublicRoomsWithPlayersParams) ([]ListPublicRoomsWithPlayersRow, error)
	// Retrieve all public rooms for a specific game type.
	ListRoomsByGameType(ctx context.Context, gameType string) ([]Room, error)
	UpdateActiveConnectionName(ctx context.Context, arg UpdateActiveConnectionNameParams) (int64, error)
	// Updates the last_seen timestamp for a connection (heartbeat).
	UpdateConnectionLastSeen(ctx context.Context, displayName string) error
	// Updates the status and current_room_id for an active connection.
	// e.g: when a player joins or leaves a room.
	UpdateConnectionStatusAndRoom(ctx context.Context, arg UpdateConnectionStatusAndRoomParams) (ActiveConnection, error)
}

var _ Querier = (*Queries)(nil)
