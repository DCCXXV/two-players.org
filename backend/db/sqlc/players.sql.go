// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: players.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO players (
    room_id,
    player_display_name,
    player_order
) VALUES (
    $1, $2, $3
)
RETURNING id, room_id, player_display_name, player_order, joined_at
`

type CreatePlayerParams struct {
	RoomID            pgtype.UUID `json:"room_id"`
	PlayerDisplayName string      `json:"player_display_name"`
	PlayerOrder       int16       `json:"player_order"`
}

// Links an active connection (identified by player_display_name) to a specific room (room_id)
// with a designated player_order (0 or 1).
// Assumes the player_display_name already exists in the active_connections table.
func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRow(ctx, createPlayer, arg.RoomID, arg.PlayerDisplayName, arg.PlayerOrder)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.PlayerDisplayName,
		&i.PlayerOrder,
		&i.JoinedAt,
	)
	return i, err
}

const getPlayersByRoomID = `-- name: GetPlayersByRoomID :many
SELECT id, room_id, player_display_name, player_order, joined_at FROM players
WHERE room_id = $1
ORDER BY player_order
`

// Retrieves all players associated with a specific room, ordered by their turn.
func (q *Queries) GetPlayersByRoomID(ctx context.Context, roomID pgtype.UUID) ([]Player, error) {
	rows, err := q.db.Query(ctx, getPlayersByRoomID, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.PlayerDisplayName,
			&i.PlayerOrder,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
