name: Deploy Go Backend (ARM) to Hetzner

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23.8"
          cache-dependency-path: ./backend/go.sum
          cache: true

      - name: Go Modules Tidy and Download
        working-directory: ./backend
        run: |
          echo "--- Go Modules Step Debug ---"
          echo "Current directory: ${PWD}"
          go mod tidy
          go mod download
          echo "--- End Go Modules Step Debug ---"

      - name: Build Go application for Linux ARM64
        working-directory: ./backend
        env:
          GOOS: linux
          GOARCH: arm64
        run: |
          echo "--- Build Step Debug ---"
          echo "Current directory: ${PWD}"
          echo "BINARY_NAME variable is: '${{ vars.BINARY_NAME }}'"
          echo "Listing parent directory (repo root) BEFORE build:"
          ls -la ..
          echo "Building for $GOOS/$GOARCH..."
          go build -v -o ../${{ vars.BINARY_NAME }} ./cmd/server/
          BUILD_EXIT_CODE=$?
          echo "go build command finished with exit code: ${BUILD_EXIT_CODE}"
          echo "Listing current directory (${PWD}) AFTER build:"
          ls -la .
          echo "Listing parent directory (repo root) AFTER build:"
          ls -la ..
          echo "--- End Build Step Debug ---"
          if [ ${BUILD_EXIT_CODE} -ne 0 ]; then
            echo "Go build failed!"
            exit ${BUILD_EXIT_CODE}
          fi
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}

      - name: Deploy Files, Run Migrations, and Restart Service
        env:
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_DEPLOY_PATH: ${{ secrets.VPS_DEPLOY_PATH }}
          BINARY_NAME: ${{ vars.BINARY_NAME }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          ALLOWED_ORIGINS: ${{ vars.ALLOWED_ORIGINS }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
          GIN_MODE: release
        run: |
          # --- Define Variables ---
          MIGRATIONS_LOCAL_PATH="./backend/db/migrate"
          BINARY_LOCAL_PATH="./${BINARY_NAME}"
          # Define paths on the VPS
          DEPLOY_PATH="${VPS_DEPLOY_PATH}"
          BINARY_VPS_PATH="${DEPLOY_PATH}/${BINARY_NAME}"
          MIGRATIONS_DIR_NAME="migrations"
          MIGRATIONS_VPS_PATH="${DEPLOY_PATH}/${MIGRATIONS_DIR_NAME}"
          VPS_TARGET="${VPS_USER}@${VPS_HOST}"
          MIGRATE_CMD="/usr/local/bin/migrate"
          # --- Prepare Remote Directories ---
          echo "Ensuring remote directories exist on ${VPS_TARGET}..."
          ssh -o StrictHostKeyChecking=no ${VPS_TARGET} "mkdir -p ${DEPLOY_PATH} && mkdir -p ${MIGRATIONS_VPS_PATH}"
          # --- List files in repo root for debugging ---
          echo "Listing files in repo root (${PWD}) before copy:"
          ls -la
          # --- Copy Files ---
          echo "Copying binary from ${BINARY_LOCAL_PATH} to ${VPS_TARGET}:${BINARY_VPS_PATH}..."
          if [ -f "${BINARY_LOCAL_PATH}" ]; then
            scp -o StrictHostKeyChecking=no ${BINARY_LOCAL_PATH} ${VPS_TARGET}:${BINARY_VPS_PATH}
            if [ $? -ne 0 ]; then echo "Error: scp command failed for binary!"; exit 1; fi
            echo "Binary copy successful."
          else
            echo "Error: Local binary file ${BINARY_LOCAL_PATH} not found!"; exit 1
          fi
          echo "Copying migrations from ${MIGRATIONS_LOCAL_PATH} to ${VPS_TARGET}:${MIGRATIONS_VPS_PATH}..."
          if [ -d "${MIGRATIONS_LOCAL_PATH}" ]; then
            scp -r -o StrictHostKeyChecking=no ${MIGRATIONS_LOCAL_PATH}/* ${VPS_TARGET}:${MIGRATIONS_VPS_PATH}/
            if [ $? -ne 0 ]; then echo "Error: scp command failed for migrations!"; exit 1; fi
            echo "Migrations copy successful."
          else
            echo "Error: Local migrations path ${MIGRATIONS_LOCAL_PATH} not found!"; exit 1
          fi
          # --- Run Commands Remotely with Enhanced Debugging ---
          echo "Running commands remotely on ${VPS_TARGET}..."
          # Start of SSH command block
          # IMPORTANT DEBUGGING CHANGE: Removed 'set -e' for now to allow all commands to run and report their errors.
          # We will explicitly check exit codes for critical commands.
          ssh -o StrictHostKeyChecking=no ${VPS_TARGET} "
            echo '--- Remote Execution Start (Debug Mode) ---'

            # Export variables needed within this script block
            export DATABASE_URL='${DATABASE_URL}'
            export ALLOWED_ORIGINS='${ALLOWED_ORIGINS}'
            export SERVICE_NAME='${SERVICE_NAME}'
            export MIGRATE_CMD='${MIGRATE_CMD}'
            export MIGRATIONS_VPS_PATH='${MIGRATIONS_VPS_PATH}'
            export DEPLOY_PATH='${DEPLOY_PATH}' # Ensure DEPLOY_PATH is available for chmod/chown if needed
            export BINARY_VPS_PATH='${BINARY_VPS_PATH}' # Ensure BINARY_VPS_PATH is available

            echo 'Changing permissions for the deployed binary...'
            # Make the binary executable
            sudo chmod +x \"\${BINARY_VPS_PATH}\"
            # Optional: Ensure the binary is owned by the correct user if needed
            # sudo chown someuser:somegroup \"\${BINARY_VPS_PATH}\"

            # --- Run Migrations ---
            echo 'Running database migrations...'
            if [ -z \"\$DATABASE_URL\" ]; then echo 'Error: DATABASE_URL secret is not set or empty!'; exit 1; fi
            echo \"Using migration path: ${MIGRATIONS_VPS_PATH}\"

            MIGRATION_OUTPUT=\$( { ${MIGRATE_CMD} -database \"\$DATABASE_URL\" -path \"${MIGRATIONS_VPS_PATH}\" up; } 2>&1 )
            MIGRATION_EXIT_CODE=\$?

            if [ \$MIGRATION_EXIT_CODE -ne 0 ]; then
              if echo \"\$MIGRATION_OUTPUT\" | grep -q 'Dirty database version'; then
                VERSION=\$(echo \"\$MIGRATION_OUTPUT\" | grep -oP 'Dirty database version \K[0-9]+')
                if [ -n \"\$VERSION\" ]; then
                  echo \"Detected dirty database version \${VERSION}. Attempting to force clean...\"
                  ${MIGRATE_CMD} -database \"\$DATABASE_URL\" -path \"${MIGRATIONS_VPS_PATH}\" force \"\${VERSION}\" || { echo 'Error forcing migration version!'; exit 1; }
                  echo \"Forced version \${VERSION} to clean. Retrying migrations...\"
                  ${MIGRATE_CMD} -database \"\$DATABASE_URL\" -path \"${MIGRATIONS_VPS_PATH}\" up || { echo 'Error re-running migrations after force!'; exit 1; }
                  echo 'Migrations applied successfully after force clean.'
                else
                  echo \"Error: Could not extract dirty version from output for force command.\"
                  echo \"Migration output: \n\$MIGRATION_OUTPUT\"
                  exit 1
                fi
              else
                echo \"Error: Migrations failed for an unexpected reason.\"
                echo \"Migration output: \n\$MIGRATION_OUTPUT\"
                exit 1
              fi
            else
              echo 'Migrations applied successfully.'
            fi

            # --- Configure Systemd Override for Environment Variables ---
            echo 'Configuring environment variables for service (${SERVICE_NAME})...'
            OVERRIDE_DIR=\"/etc/systemd/system/${SERVICE_NAME}.service.d\"
            OVERRIDE_FILE=\"\${OVERRIDE_DIR}/override.conf\"

            # Create the override directory (fail if sudo fails)
            sudo mkdir -p \"\${OVERRIDE_DIR}\" || { echo 'Error creating systemd override directory!'; exit 1; }

            printf \"[Service]\\nEnvironment=\\\"DATABASE_URL=%s\\\"\\nEnvironment=\\\"ALLOWED_ORIGINS=%s\\\"\\n\" \"\$DATABASE_URL\" \"\$ALLOWED_ORIGINS\" | sudo tee \"\${OVERRIDE_FILE}\" > /dev/null || { echo 'Error writing systemd override file!'; exit 1; }
            echo \"Systemd override file created/updated at \${OVERRIDE_FILE}\"

            # Reload systemd manager configuration (fail if sudo fails)
            echo 'Reloading systemd daemon...'
            sudo systemctl daemon-reload || { echo 'Error reloading systemd daemon!'; exit 1; }

            # --- Restart Service ---
            echo 'Restarting service (${SERVICE_NAME})...'
            sudo systemctl restart ${SERVICE_NAME} || { echo 'Error restarting service!'; exit 1; }
            echo 'Service restarted successfully.'

            echo '--- Remote Execution End ---'
            echo 'Deployment successful!'
          "
          # Check the exit status of the SSH command itself
          if [ $? -ne 0 ]; then
            echo "Error: SSH command block failed!"
            exit 1
          fi
